# yaml-language-server: $schema=https://raw.githubusercontent.com/dbt-labs/dbt-jobs-as-code/main/src/dbt_jobs_as_code/schemas/load_job_schema.json

jobs:
  job1:

    account_id: 43791
    dbt_version: null
    deferring_job_definition_id: null
    environment_id: "{{ environment_id }}"
    execute_steps:
    - "dbt run --select model1+"
    - "dbt run --select model2+"
    execution:
      timeout_seconds: 0
    generate_docs: false
    name: "My Job 1"
    project_id: "{{ project_id }}"
    run_generate_sources: true
    schedule:
      cron: "0 */2 * * *"
    settings:
      target_name: production
      threads: 4
    state: 1
    triggers:
      custom_branch_only: false
      git_provider_webhook: false
      github_webhook: false
      # we can add more complex logic in Jinja based on our variables
      schedule: "{{ env_type == 'prod' }}"


  job2:
    account_id: 43791
    dbt_version: null
    deferring_job_definition_id: null
    deferring_environment_id: "{{ deferring_environment_id }}"
    environment_id: "{{ environment_id }}"
    execute_steps:
    - dbt run-operation clone_all_production_schemas
    - dbt compile
    execution:
      timeout_seconds: 0
    generate_docs: false
    name: CI/CD run
    project_id: "{{ project_id }}"
    run_generate_sources: false
    schedule:
      cron: "0 * * * *"
    settings:
      target_name: TEST
      threads: 4
    state: 1
    triggers:
      custom_branch_only: true
      git_provider_webhook: false
      github_webhook: true # this job runs from webhooks
      schedule: false # this doesn't run on a schedule
    custom_environment_variables:
      - DBT_ENV1: My val1
      - DBT_ENV2: My val2